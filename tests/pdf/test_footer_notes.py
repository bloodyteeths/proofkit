"""
Test Suite: PDF Footer Notes

Tests the small gray footer notes functionality that appears when PDF/A-3 
or RFC 3161 timestamping is unavailable. Validates that users are properly
informed about feature availability without blocking certificate generation.

Key test coverage:
- Footer notes appear when PDF/A-3 unavailable
- Footer notes appear when RFC 3161 timestamping unavailable
- Footer notes appear when both are unavailable
- No footer notes when both features are available
- Footer formatting and styling is correct
"""

import pytest
from unittest.mock import patch, MagicMock, Mock
from datetime import datetime, timezone
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph

from core.render_pdf import (
    _create_footer_info,
    _create_footer_with_branding,
    generate_proof_pdf,
    PDF_COMPLIANCE_AVAILABLE
)
from core.models import SpecV1, DecisionResult, Industry


class TestFooterInfoNotes:
    """Test the _create_footer_info function with availability notes."""
    
    def test_footer_info_no_notes_when_all_available(self):
        """Footer should have no notes when all features are available."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=True,
            rfc3161_available=True
        )
        
        assert isinstance(footer, Paragraph)
        # Should not contain availability notes
        footer_text = str(footer.text)
        assert "PDF/A-3 compliance unavailable" not in footer_text
        assert "RFC 3161 timestamping unavailable" not in footer_text
        
    def test_footer_info_pdf_a3_unavailable_note(self):
        """Footer should show note when PDF/A-3 is unavailable."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=True
        )
        
        footer_text = str(footer.text)
        assert "PDF/A-3 compliance unavailable" in footer_text
        assert "RFC 3161 timestamping unavailable" not in footer_text
        
    def test_footer_info_rfc3161_unavailable_note(self):
        """Footer should show note when RFC 3161 is unavailable."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=True,
            rfc3161_available=False
        )
        
        footer_text = str(footer.text)
        assert "PDF/A-3 compliance unavailable" not in footer_text
        assert "RFC 3161 timestamping unavailable" in footer_text
        
    def test_footer_info_both_unavailable_notes(self):
        """Footer should show both notes when both features are unavailable."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        footer_text = str(footer.text)
        assert "PDF/A-3 compliance unavailable" in footer_text
        assert "RFC 3161 timestamping unavailable" in footer_text
        
    def test_footer_info_maintains_standard_content(self):
        """Footer should maintain standard content along with notes."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        footer_text = str(footer.text)
        # Should still contain standard footer information
        assert "Generated by ProofKit v1.0" in footer_text
        assert "2023-12-01 12:00:00 UTC" in footer_text
        assert "Powder-Coat Cure Validation Certificate" in footer_text


class TestFooterWithBrandingNotes:
    """Test the _create_footer_with_branding function with availability notes."""
    
    def test_branding_footer_no_notes_when_all_available(self):
        """Branded footer should have no notes when all features are available."""
        config = {'show_branding': True}
        
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer_elements = _create_footer_with_branding(
            config=config,
            now_provider=mock_now,
            pdf_a3_available=True,
            rfc3161_available=True
        )
        
        # Convert all paragraph elements to text
        footer_text = ""
        for element in footer_elements:
            if hasattr(element, 'text'):
                footer_text += str(element.text) + " "
        
        assert "PDF/A-3 compliance unavailable" not in footer_text
        assert "RFC 3161 timestamping unavailable" not in footer_text
        
    def test_branding_footer_shows_availability_notes(self):
        """Branded footer should show availability notes."""
        config = {'show_branding': True}
        
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer_elements = _create_footer_with_branding(
            config=config,
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        # Convert all paragraph elements to text
        footer_text = ""
        for element in footer_elements:
            if hasattr(element, 'text'):
                footer_text += str(element.text) + " "
        
        assert "PDF/A-3 compliance unavailable" in footer_text
        assert "RFC 3161 timestamping unavailable" in footer_text
        
    def test_branding_footer_maintains_branding_with_notes(self):
        """Branded footer should maintain branding along with availability notes."""
        config = {'show_branding': True}
        
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer_elements = _create_footer_with_branding(
            config=config,
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=True
        )
        
        # Convert all paragraph elements to text
        footer_text = ""
        for element in footer_elements:
            if hasattr(element, 'text'):
                footer_text += str(element.text) + " "
        
        # Should contain standard branding and availability note
        assert "Powered by ProofKit" in footer_text
        assert "PDF/A-3 compliance unavailable" in footer_text
        
    def test_enterprise_config_no_branding_but_shows_notes(self):
        """Enterprise config should hide branding but show availability notes."""
        config = {'show_branding': False}  # Enterprise config
        
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer_elements = _create_footer_with_branding(
            config=config,
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        # Convert all paragraph elements to text
        footer_text = ""
        for element in footer_elements:
            if hasattr(element, 'text'):
                footer_text += str(element.text) + " "
        
        # Should not contain branding but should contain availability notes
        assert "Powered by ProofKit" not in footer_text
        assert "PDF/A-3 compliance unavailable" in footer_text
        assert "RFC 3161 timestamping unavailable" in footer_text


class TestPDFGenerationFooterIntegration:
    """Test that PDF generation properly passes availability information to footer."""
    
    def test_generate_pdf_passes_availability_to_footer(self):
        """PDF generation should pass feature availability to footer functions."""
        # Mock the necessary components
        mock_spec = MagicMock(spec=SpecV1)
        mock_spec.job.job_id = "test_job_123"
        mock_spec.spec.method = "powder"
        mock_spec.spec.target_temp_C = 200
        mock_spec.spec.hold_time_s = 600
        mock_spec.spec.sensor_uncertainty_C = 5
        
        mock_decision = MagicMock(spec=DecisionResult)
        mock_decision.pass_ = True
        mock_decision.status = "PASS"
        mock_decision.actual_hold_time_s = 650
        mock_decision.required_hold_time_s = 600
        mock_decision.max_temp_C = 205.2
        mock_decision.min_temp_C = 198.7
        mock_decision.conservative_threshold_C = 205.0
        mock_decision.reasons = []
        mock_decision.warnings = []
        
        # Create a test plot file
        import tempfile
        import os
        from PIL import Image, ImageDraw
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as f:
            # Create a simple test image
            img = Image.new('RGB', (800, 600), color='white')
            draw = ImageDraw.Draw(img)
            draw.text((10, 10), "Test Plot", fill='black')
            img.save(f.name, 'PNG')
            plot_path = f.name
        
        try:
            # Test with PDF compliance unavailable
            with patch('core.render_pdf.PDF_COMPLIANCE_AVAILABLE', False):
                with patch('core.render_pdf._create_footer_with_branding') as mock_footer:
                    mock_footer.return_value = []
                    
                    # This should not raise an exception
                    pdf_bytes = generate_proof_pdf(
                        spec=mock_spec,
                        decision=mock_decision,
                        plot_path=plot_path,
                        user_plan='free',
                        check_validation_gates=False  # Skip validation gates for this test
                    )
                    
                    # Verify footer was called with availability info
                    mock_footer.assert_called()
                    call_args = mock_footer.call_args
                    
                    # Check that PDF/A-3 availability was passed as False
                    assert 'pdf_a3_available' in call_args.kwargs
                    assert call_args.kwargs['pdf_a3_available'] is False
                    
        finally:
            # Clean up test file
            if os.path.exists(plot_path):
                os.unlink(plot_path)
                
    def test_generate_pdf_handles_missing_dependencies_gracefully(self):
        """PDF generation should handle missing dependencies gracefully."""
        # Mock the necessary components
        mock_spec = MagicMock(spec=SpecV1)
        mock_spec.job.job_id = "test_job_456"
        
        mock_decision = MagicMock(spec=DecisionResult)
        mock_decision.pass_ = True
        mock_decision.status = "PASS"
        
        # Create a test plot file
        import tempfile
        import os
        from PIL import Image
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as f:
            img = Image.new('RGB', (100, 100), color='white')
            img.save(f.name, 'PNG')
            plot_path = f.name
        
        try:
            # Test that PDF generation doesn't fail when compliance unavailable
            with patch('core.render_pdf.PDF_COMPLIANCE_AVAILABLE', False):
                pdf_bytes = generate_proof_pdf(
                    spec=mock_spec,
                    decision=mock_decision,
                    plot_path=plot_path,
                    user_plan='free',
                    check_validation_gates=False
                )
                
                # Should return valid PDF bytes
                assert isinstance(pdf_bytes, bytes)
                assert len(pdf_bytes) > 0
                assert pdf_bytes.startswith(b'%PDF')
                
        finally:
            if os.path.exists(plot_path):
                os.unlink(plot_path)


class TestFooterNoteStyling:
    """Test that footer notes have appropriate styling."""
    
    def test_footer_notes_use_gray_text(self):
        """Footer notes should use gray text styling."""
        config = {'show_branding': True}
        
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer_elements = _create_footer_with_branding(
            config=config,
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        # Find the paragraph with availability notes
        for element in footer_elements:
            if hasattr(element, 'text') and "unavailable" in str(element.text):
                # Check that the paragraph uses gray text color
                assert hasattr(element, 'style')
                # The text color should be grayish (0.4, 0.4, 0.4)
                assert element.style.textColor.red <= 0.5
                assert element.style.textColor.green <= 0.5
                assert element.style.textColor.blue <= 0.5
                break
        else:
            pytest.fail("No availability note found in footer elements")
            
    def test_footer_notes_small_font_size(self):
        """Footer notes should use small font size."""
        def mock_now():
            return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
        
        footer = _create_footer_info(
            now_provider=mock_now,
            pdf_a3_available=False,
            rfc3161_available=False
        )
        
        # Footer should use small font size (8pt)
        assert hasattr(footer, 'style')
        assert footer.style.fontSize == 8


# Example footer configurations for testing
FOOTER_TEST_CONFIGS = [
    {
        'name': 'free_tier',
        'config': {'show_branding': True, 'watermark': 'NOT FOR PRODUCTION USE'},
        'pdf_a3_available': True,
        'rfc3161_available': False
    },
    {
        'name': 'enterprise_no_deps',
        'config': {'show_branding': False},
        'pdf_a3_available': False,
        'rfc3161_available': False
    },
    {
        'name': 'all_features_available',
        'config': {'show_branding': True},
        'pdf_a3_available': True,
        'rfc3161_available': True
    }
]


@pytest.mark.parametrize("test_config", FOOTER_TEST_CONFIGS)
def test_footer_configurations(test_config):
    """Test various footer configurations with different availability combinations."""
    def mock_now():
        return datetime(2023, 12, 1, 12, 0, 0, tzinfo=timezone.utc)
    
    footer_elements = _create_footer_with_branding(
        config=test_config['config'],
        now_provider=mock_now,
        pdf_a3_available=test_config['pdf_a3_available'],
        rfc3161_available=test_config['rfc3161_available']
    )
    
    # Should always return a list of elements
    assert isinstance(footer_elements, list)
    assert len(footer_elements) > 0
    
    # Convert to text for content validation
    footer_text = ""
    for element in footer_elements:
        if hasattr(element, 'text'):
            footer_text += str(element.text) + " "
    
    # Validate based on availability
    if not test_config['pdf_a3_available']:
        assert "PDF/A-3 compliance unavailable" in footer_text
    else:
        assert "PDF/A-3 compliance unavailable" not in footer_text
        
    if not test_config['rfc3161_available']:
        assert "RFC 3161 timestamping unavailable" in footer_text
    else:
        assert "RFC 3161 timestamping unavailable" not in footer_text
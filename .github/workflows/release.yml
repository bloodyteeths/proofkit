name: Release Pipeline

on:
  # Trigger on push to main or tags
  push:
    branches: [ main ]
    tags:
      - 'v*'
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      validation_mode:
        description: 'Validation mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - smoke-only

env:
  PYTHON_VERSION: "3.11"
  PRODUCTION_URL: https://proofkit.net

jobs:
  # Release validation (depends on CI pipeline completion)
  release-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Setup Python with Cache
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install --use-pep517 -r requirements.txt
        pip install --use-pep517 -r requirements-dev.txt
        # System dependencies for PDF processing
        sudo apt-get update && sudo apt-get install -y libmagic1

    - name: Run Production Release Validation
      run: |
        python -m cli.release_check \
          --mode production \
          --output-json release-report-prod.json \
          --output-html release-report.html \
          --verbose

    - name: Performance Regression Check
      run: |
        python -c "
        import json
        with open('release-report-prod.json', 'r') as f:
            report = json.load(f)
        
        perf = report.get('performance_metrics', {})
        normalize_time = perf.get('normalize_time', 0)
        decide_time = perf.get('decide_time', 0)
        total_time = perf.get('total_time', 0)
        
        print(f'Performance metrics:')
        print(f'  Normalize: {normalize_time:.3f}s')
        print(f'  Decision: {decide_time:.3f}s')  
        print(f'  Total: {total_time:.3f}s')
        
        if normalize_time > 5.0 or decide_time > 3.0 or total_time > 10.0:
            print(f'ERROR: Performance regression detected')
            exit(1)
        print('Performance check passed')
        "

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: release-validation-${{ github.run_id }}
        path: |
          release-report-prod.json
          release-report.html
        retention-days: 90

  # Live production smoke test
  production-smoke:
    runs-on: ubuntu-latest
    needs: release-validation
    if: github.event.inputs.validation_mode == 'full' || github.event.inputs.validation_mode == 'smoke-only' || github.event_name == 'push'
    timeout-minutes: 15

    steps:
    - name: Production Health Check
      run: |
        echo "Testing production environment health..."
        
        # Health endpoint
        response=$(curl -s -w "%{http_code}|%{time_total}" \
          --max-time 15 --retry 3 --retry-delay 5 \
          "${{ env.PRODUCTION_URL }}/health" || echo "000|0")
        
        http_code=$(echo "$response" | cut -d'|' -f1)
        response_time=$(echo "$response" | cut -d'|' -f2)
        
        if [ "$http_code" != "200" ]; then
          echo "‚ùå Production health check failed: $http_code"
          exit 1
        fi
        
        echo "‚úÖ Production health check passed (${response_time}s)"

    - name: Critical API Validation
      run: |
        echo "Testing critical API endpoints..."
        
        # API presets
        response=$(curl -s -w "%{http_code}" --max-time 20 \
          -H "Accept: application/json" \
          "${{ env.PRODUCTION_URL }}/api/presets" || echo "000")
        
        if [ "$response" != "200" ]; then
          echo "‚ùå API presets failed: $response"
          exit 1
        fi
        
        # Industry pages spot check
        for industry in powder autoclave coldchain; do
          response=$(curl -s -w "%{http_code}" --max-time 15 \
            "${{ env.PRODUCTION_URL }}/industries/$industry" || echo "000")
          if [ "$response" != "200" ]; then
            echo "‚ùå Industry page $industry failed: $response"
            exit 1
          fi
        done
        
        echo "‚úÖ Critical APIs validated"

  # GitHub Release creation (tags only)
  github-release:
    runs-on: ubuntu-latest
    needs: [release-validation, production-smoke]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-validation-${{ github.run_id }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-report-prod.json
          release-report.html
        body: |
          ## ProofKit Release ${{ github.ref_name }}
          
          This release has been validated with comprehensive testing including:
          
          - ‚úÖ CI Pipeline (unit tests, acceptance tests, campaign validation)
          - ‚úÖ Production release validation
          - ‚úÖ Live production smoke tests
          - ‚úÖ Performance regression testing
          
          See attached validation reports for detailed results.
        draft: false
        prerelease: false

    - name: Upload Release Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: releases/${{ github.ref_name }}
        keep_files: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy release validation report for ${{ github.ref_name }}'

  # Release summary
  release-summary:
    runs-on: ubuntu-latest
    needs: [release-validation, production-smoke, github-release]
    if: always()
    
    steps:
    - name: Generate Release Summary
      run: |
        echo "# Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Release Validation | ${{ needs.release-validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production Smoke | ${{ needs.production-smoke.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Release | ${{ needs.github-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.release-validation.result }}" == "success" && 
              ("${{ needs.production-smoke.result }}" == "success" || "${{ needs.production-smoke.result }}" == "skipped") ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Release Pipeline: SUCCESS" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "üéâ **New release published**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚ùå Release Pipeline: FAILURE" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check Release Status
      run: |
        if [[ "${{ needs.release-validation.result }}" != "success" ]]; then
          echo "‚ùå Release validation failed"
          exit 1
        fi
        echo "‚úÖ Release pipeline completed successfully"